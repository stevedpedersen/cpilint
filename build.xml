<?xml version="1.0"?>

<project name="CPILint" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- Project metadata -->
    <property name="app.name" value="cpilint"/>
    <property name="version" value="1.0.5"/>
    <property name="app.name.versioned" value="${app.name}-${version}"/>
    <property name="jar" value="${app.name.versioned}.jar"/>

    <!-- Source & build directories -->
    <property name="source.dir" value="src"/>
    <property name="build.dir" value="build"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.lib" value="${build.dir}/lib"/>

    <!-- Dependencies staging -->
    <property name="dependencies.dir" value="lib"/>
    <property name="compile.dependencies.dir" value="${dependencies.dir}/compile"/>
    <property name="runtime.dependencies.dir" value="${dependencies.dir}/runtime"/>
    <!-- CodeNarc and SLF4J live under lib/codenarc -->
    <property name="codenarc.dir" value="${dependencies.dir}/codenarc"/>

    <!-- Release & temp -->
    <property name="release.dir" value="release"/>
    <property name="release.archive" value="${app.name.versioned}.zip"/>
    <property name="source.archive" value="${app.name.versioned}-src.zip"/>
    <property name="temp.dir" value="temp"/>
    <property name="release.root" value="${app.name.versioned}"/>

    <!-- Other resources -->
    <property name="resources.dir" value="resources"/>
    <property name="scripts.dir" value="scripts"/>
    <property name="logback.dir" value="logback"/>
    <property name="graphics.dir" value="graphics"/>
    <property name="3rd.party.licenses.dir" value="3rd-party-licenses"/>
    <property name="dist.files.dir" value="dist-files"/>
    <property name="xerces.dir" value="${dist.files.dir}/xerces-runtime-jars"/>
    <property name="samples.dir" value="${dist.files.dir}/samples"/>
	<property name="templates.dir" value="${resources.dir}/templates"/>
	<property name="docker.release.dir" value="docker-release"/>
	<property name="rulesets.dir" value="rulesets"/>
	<property name="archive.dir" value="archive"/>
	<property name="report-template" value="${templates.dir}/cpilint-report-template.gsp"/>
	<property name="report.template.neutral" value="${templates.dir}/cpilint-report-template-neutral.gsp"/>


    <!-- Classpath for compilation: core + staged CodeNarc jars -->
    <path id="classpath.build">
        <fileset dir="${dependencies.dir}" includes="*.jar"/>
        <fileset dir="${compile.dependencies.dir}" includes="*.jar"/>
        <fileset dir="${codenarc.dir}" includes="*.jar"/>
    </path>

    <!-- PREPARE: create all necessary dirs -->
    <target name="prepare" description="Creates directories required by the build">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${release.dir}"/>
        <mkdir dir="${codenarc.dir}"/>
    </target>

    <!-- CLEAN: remove build artifacts and staged CodeNarc but keep 'lib' root -->
    <target name="clean" description="Removes files and dirs generated by Ant">
        <delete dir="${build.dir}"/>
        <delete dir="${release.dir}"/>
        <delete dir="${temp.dir}"/>
        <delete dir="${codenarc.dir}" failonerror="true"/>
    </target>

    <!-- DEPENDENCIES: Ivy + stage CodeNarc fat-jar only -->
    <target name="dependencies" description="Retrieves dependencies and stages CodeNarc jars">
        <ivy:retrieve conf="compile" pattern="${compile.dependencies.dir}/[artifact]-[revision].[ext]"/>
        <ivy:retrieve conf="runtime" pattern="${runtime.dependencies.dir}/[artifact]-[revision].[ext]"/>

        <!-- Stage only the CodeNarc fat-jar into lib/codenarc -->
        <copy todir="${codenarc.dir}">
            <fileset dir="${dist.files.dir}/codenarc" includes="CodeNarc-*.jar"/>
        </copy>
    </target>

    <!-- COMPILE: use combined classpath -->
    <target name="compile" depends="prepare,dependencies" description="Compiles all source files">
        <javac srcdir="${source.dir}" destdir="${build.classes}" includeantruntime="false" release="17">
            <classpath refid="classpath.build"/>
        </javac>
    </target>

    <!-- JAR: package compiled classes + resources -->
    <target name="jar" depends="compile" description="Generates a JAR archive containing all classes">
        <jar jarfile="${build.lib}/${jar}">
            <fileset dir="${build.classes}" includes="**/*.class"/>
            <fileset dir="." includes="${resources.dir}/**"/>
        </jar>
    </target>

    <target name="release" depends="jar" description="Generates a release archive for distribution">
		<mkdir dir="${temp.dir}"/>
		<zip destfile="${temp.dir}/${source.archive}">
			<fileset dir="." includes="${3rd.party.licenses.dir}/*"/>
			<fileset dir="." includes="${dist.files.dir}/*"/>
			<fileset dir="." includes="${graphics.dir}/*"/>
			<fileset dir="." includes="${logback.dir}/*"/>
			<fileset dir="." includes="${resources.dir}/**"/>
			<fileset dir="." includes="${scripts.dir}/*"/>
			<fileset dir="." includes="${source.dir}/**"/>
			<fileset dir="." includes="BUILDING.md"/>
			<fileset dir="." includes="LICENSE.txt"/>
			<fileset dir="." includes="README.md"/>
			<fileset dir="." includes="build.xml"/>
			<fileset dir="." includes="ivy.xml"/>
		</zip>
		<zip destfile="${release.dir}/${release.archive}">
			<zipfileset dir="${build.lib}" includes="${jar}" prefix="${release.root}/lib"/>
			<zipfileset dir="${runtime.dependencies.dir}" includes="*.jar" prefix="${release.root}/lib"/>
			<zipfileset dir="${xerces.dir}" includes="*.jar" prefix="${release.root}/lib"/>
			<zipfileset dir="${temp.dir}" includes="${source.archive}" prefix="${release.root}/source"/>
			<zipfileset dir="${scripts.dir}" prefix="${release.root}/bin"/>
			<zipfileset dir="." includes="LICENSE.txt" prefix="${release.root}/"/>
			<zipfileset dir="${logback.dir}" prefix="${release.root}/logback"/>
			<zipfileset dir="${3rd.party.licenses.dir}" prefix="${release.root}/3rd-party-licenses"/>
			<zipfileset dir="${dist.files.dir}" includes="README.txt" prefix="${release.root}/"/>
			<zipfileset dir="${samples.dir}" prefix="${release.root}/samples"/>
			<zipfileset dir="${codenarc.dir}" includes="*.jar" prefix="${release.root}/lib"/>
		</zip>
		<delete dir="${temp.dir}"/>
	</target>

	<target name="docker-release" depends="jar" description="Creates a Docker release archive with runtime artifacts">
		<mkdir dir="${docker.release.dir}"/>
		<zip destfile="${docker.release.dir}/${app.name.versioned}.zip">
			<zipfileset dir="${build.lib}" includes="${jar}" prefix="lib"/>
			<zipfileset dir="${runtime.dependencies.dir}" includes="*.jar" prefix="lib"/>
			<zipfileset dir="${xerces.dir}" includes="*.jar" prefix="lib"/>
			<zipfileset dir="${scripts.dir}" prefix="bin"/>
			<zipfileset dir="${logback.dir}" prefix="logback"/>
			<zipfileset dir="${rulesets.dir}" prefix="rulesets"/>
			<zipfileset dir="${templates.dir}" prefix="templates"/>
			<zipfileset dir="${codenarc.dir}" includes="*.jar" prefix="lib"/>
		</zip>
	</target>

	<target name="bundle-supplemental" depends="jar" description="Creates an archive with rulesets and templates for external pipeline use">
		<mkdir dir="${archive.dir}"/>
		<zip destfile="${archive.dir}/${app.name}-bundle.zip">
			<zipfileset dir="${rulesets.dir}" prefix="rulesets">
				<include name="jnj-base.xml"/>
				<include name="jnj-rules.xml"/>
				<include name="jnj-naming.xml"/>
				<include name="codenarc_rules.groovy"/>
			</zipfileset>
			<zipfileset dir="${templates.dir}" prefix="templates">
				<include name="cpilint-report-template.gsp"/>
				<!-- <include name="scripts.js"/> -->
			</zipfileset>
		</zip>
	</target>

    <!-- RUN-CODENARC: define and run CodeNarc after staging -->
    <target name="run-codenarc" depends="dependencies" description="Run CodeNarc linting on Groovy scripts">
        <!-- define classpath for CodeNarc including binder -->
        <path id="codenarc.path">
            <pathelement location="${codenarc.dir}/CodeNarc-3.2.0-all.jar"/>
            <pathelement location="${compile.dependencies.dir}/slf4j-simple-2.0.13.jar"/>
        </path>
        <taskdef name="codenarc" classname="org.codenarc.ant.CodeNarcTask">
            <classpath refid="codenarc.path"/>
        </taskdef>

        <codenarc ruleSetFiles="${rulesets.dir}/codenarc_rules.groovy" failOnError="false">
            <fileset dir="resources">
                <include name="**/*.groovy"/>
            </fileset>
            <report type="json">
                <option name="outputFile" value="codenarc-results.json"/>
                <option name="title" value="${app.name.versioned} Groovy Scripts Report"/>
            </report>
        </codenarc>
    </target>

</project>


<!-- <?xml version="1.0"?>

<project name="CPILint" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="app.name" value="cpilint"/>
	<property name="version" value="1.0.5"/>
	<property name="app.name.versioned" value="${app.name}-${version}"/>
	<property name="jar" value="${app.name.versioned}.jar"/>
	<property name="source.dir" value="src"/>
	<property name="dependencies.dir" value="lib"/>
	<property name="codenarc.dir" value="${dependencies.dir}/codenarc"/>
	<property name="3rd.party.licenses.dir" value="3rd-party-licenses"/>
	<property name="compile.dependencies.dir" value="${dependencies.dir}/compile"/>
	<property name="runtime.dependencies.dir" value="${dependencies.dir}/runtime"/>
	<property name="build.dir" value="build"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="release.dir" value="release"/>
	<property name="release.archive" value="${app.name.versioned}.zip"/>
    <property name="source.archive" value="${app.name.versioned}-src.zip"/>
    <property name="temp.dir" value="temp"/>
    <property name="release.root" value="${app.name.versioned}"/>
	<property name="scripts.dir" value="scripts"/>
	<property name="logback.dir" value="logback"/>
	<property name="graphics.dir" value="graphics"/>
	<property name="resources.dir" value="resources"/>
	<property name="dist.files.dir" value="dist-files"/>
	<property name="xerces.dir" value="${dist.files.dir}/xerces-runtime-jars"/>
	<property name="samples.dir" value="${dist.files.dir}/samples"/>
	<property name="templates.dir" value="${resources.dir}/templates"/>
	<property name="docker.release.dir" value="docker-release"/>
	<property name="rulesets.dir" value="rulesets"/>
	<property name="archive.dir" value="archive"/>
	<property name="report-template" value="${templates.dir}/cpilint-report-template.gsp"/>
	<property name="report.template.neutral" value="${templates.dir}/cpilint-report-template-neutral.gsp"/>



    <path id="classpath.build">
        <fileset dir="${dependencies.dir}" includes="*.jar"/>
        <fileset dir="${compile.dependencies.dir}" includes="*.jar"/>
        <fileset dir="${codenarc.dir}" includes="*.jar"/>
    </path>


    <target name="prepare" description="Creates directories required by the build">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${release.dir}"/>
        <mkdir dir="${codenarc.dir}"/>
    </target>

	<target name="clean" description="Removes all files and directories generated by Ant">
		<delete dir="${build.dir}"/>
		<delete dir="${release.dir}"/>
		<delete dir="${temp.dir}"/>
		<delete dir="${dependencies.dir}"/>
	</target>

    <target name="dependencies" description="Retrieves dependencies with Ivy and stages CodeNarc jars">
        <ivy:retrieve conf="compile" pattern="${compile.dependencies.dir}/[artifact]-[revision].[ext]"/>
        <ivy:retrieve conf="runtime" pattern="${runtime.dependencies.dir}/[artifact]-[revision].[ext]"/>
        <copy todir="${codenarc.dir}">
            <fileset dir="${compile.dependencies.dir}" includes="slf4j-simple-*.jar"/>
        </copy>
        <copy todir="${codenarc.dir}">
            <fileset dir="${compile.dependencies.dir}" includes="slf4j-simple-*.jar"/>
            <fileset dir="${runtime.dependencies.dir}" includes="slf4j-simple-*.jar"/>
        </copy>
    </target>

	<target name="compile" depends="prepare,dependencies" description="Compiles all source files">
		<javac srcdir="${source.dir}" destdir="${build.classes}" release="17" includeantruntime="false">
			<classpath refid="classpath.build"/>
		</javac>
	</target>

	<target name="jar" depends="compile" description="Generates a JAR archive containing all classes">
		<jar jarfile="${build.lib}/${jar}">
			<fileset dir="${build.classes}" includes="**/*.class"/>
			<fileset dir="." includes="${resources.dir}/**"/>
		</jar>
	</target>

    <target name="release" depends="jar" description="Generates a release archive for distribution">
		<mkdir dir="${temp.dir}"/>
		<zip destfile="${temp.dir}/${source.archive}">
			<fileset dir="." includes="${3rd.party.licenses.dir}/*"/>
			<fileset dir="." includes="${dist.files.dir}/*"/>
			<fileset dir="." includes="${graphics.dir}/*"/>
			<fileset dir="." includes="${logback.dir}/*"/>
			<fileset dir="." includes="${resources.dir}/**"/>
			<fileset dir="." includes="${scripts.dir}/*"/>
			<fileset dir="." includes="${source.dir}/**"/>
			<fileset dir="." includes="BUILDING.md"/>
			<fileset dir="." includes="LICENSE.txt"/>
			<fileset dir="." includes="README.md"/>
			<fileset dir="." includes="build.xml"/>
			<fileset dir="." includes="ivy.xml"/>
		</zip>
		<zip destfile="${release.dir}/${release.archive}">
			<zipfileset dir="${build.lib}" includes="${jar}" prefix="${release.root}/lib"/>
			<zipfileset dir="${runtime.dependencies.dir}" includes="*.jar" prefix="${release.root}/lib"/>
			<zipfileset dir="${xerces.dir}" includes="*.jar" prefix="${release.root}/lib"/>
			<zipfileset dir="${temp.dir}" includes="${source.archive}" prefix="${release.root}/source"/>
			<zipfileset dir="${scripts.dir}" prefix="${release.root}/bin"/>
			<zipfileset dir="." includes="LICENSE.txt" prefix="${release.root}/"/>
			<zipfileset dir="${logback.dir}" prefix="${release.root}/logback"/>
			<zipfileset dir="${3rd.party.licenses.dir}" prefix="${release.root}/3rd-party-licenses"/>
			<zipfileset dir="${dist.files.dir}" includes="README.txt" prefix="${release.root}/"/>
			<zipfileset dir="${samples.dir}" prefix="${release.root}/samples"/>
			<zipfileset dir="${codenarc.dir}" includes="*.jar" prefix="${release.root}/lib"/>
		</zip>
		<delete dir="${temp.dir}"/>
	</target>

	<target name="docker-release" depends="jar" description="Creates a Docker release archive with runtime artifacts">
		<mkdir dir="${docker.release.dir}"/>
		<zip destfile="${docker.release.dir}/${app.name.versioned}.zip">
			<zipfileset dir="${build.lib}" includes="${jar}" prefix="lib"/>
			<zipfileset dir="${runtime.dependencies.dir}" includes="*.jar" prefix="lib"/>
			<zipfileset dir="${xerces.dir}" includes="*.jar" prefix="lib"/>
			<zipfileset dir="${scripts.dir}" prefix="bin"/>
			<zipfileset dir="${logback.dir}" prefix="logback"/>
			<zipfileset dir="${rulesets.dir}" prefix="rulesets"/>
			<zipfileset dir="${templates.dir}" prefix="templates"/>
			<zipfileset dir="${codenarc.dir}" includes="*.jar" prefix="lib"/>
		</zip>
	</target>

	<target name="bundle-supplemental" depends="jar" description="Creates an archive with rulesets and templates for external pipeline use">
		<mkdir dir="${archive.dir}"/>
		<zip destfile="${archive.dir}/${app.name}-bundle.zip">
			<zipfileset dir="${rulesets.dir}" prefix="rulesets">
				<include name="jnj-base.xml"/>
				<include name="jnj-rules.xml"/>
				<include name="jnj-naming.xml"/>
				<include name="codenarc_rules.groovy"/>
			</zipfileset>
			<zipfileset dir="${templates.dir}" prefix="templates">
				<include name="cpilint-report-template.gsp"/>
				<include name="scripts.js"/>
			</zipfileset>
		</zip>
	</target>

    <path id="codenarc.path">
        <fileset dir="${codenarc.dir}" includes="*.jar"/>
        <fileset dir="${codenarc.dir}" includes="slf4j*.jar"/>
    </path>

    <taskdef name="codenarc" classname="org.codenarc.ant.CodeNarcTask">
        <classpath refid="codenarc.path"/>
    </taskdef>
		<pathelement location="${dist.files.dir}/codenarc/CodeNarc-3.2.0-all.jar"/>
		<pathelement location="${dependencies.dir}/slf4j-simple-2.0.13.jar"/>
		<pathelement location="${basedir}/rulesets"/>
	</path>

    <taskdef name="codenarc" classname="org.codenarc.ant.CodeNarcTask">
		<classpath refid="codenarc.path"/>
	</taskdef>

    <target name="run-codenarc" description="Run CodeNarc linting on Groovy scripts">
        <codenarc ruleSetFiles="file:${rulesets.dir}/codenarc_rules.groovy">
			<classpath refid="codenarc.path"/>
            
            <fileset dir="resources">
                <include name="**/*.groovy"/>
            </fileset>
			<report type="json">
				<option name="outputFile" value="codenarc-report.json" />
				<option name="title" value="iFlow Groovy Script Report" />
			</report>
        </codenarc>
    </target> 
</project> 
-->
