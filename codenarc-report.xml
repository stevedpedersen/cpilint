<?xml version='1.0'?>
<CodeNarc url='https://codenarc.org' version='3.2.0'><Report timestamp='Apr 30, 2025, 6:06:10 PM'/><Project title='iFlow Governance'><SourceDirectory>resources\if-02-example\src\main\</SourceDirectory></Project><PackageSummary totalFiles='3' filesWithViolations='3' priority1='0' priority2='5' priority3='33'></PackageSummary><Package path='' totalFiles='3' filesWithViolations='3' priority1='0' priority2='5' priority3='33'></Package><Package path='resources' totalFiles='3' filesWithViolations='3' priority1='0' priority2='5' priority3='33'></Package><Package path='resources/script' totalFiles='3' filesWithViolations='3' priority1='0' priority2='5' priority3='33'><File name='Logger.groovy'><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='19'><SourceLine><![CDATA[def mplConfig = message.getProperty('SAP_MessageProcessingLogConfiguration')]]></SourceLine><Message><![CDATA[The type is not specified for variable "mplConfig"]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='45'><SourceLine><![CDATA[def stepId = this.mpl.get(mplKeys.find { it.getName() == 'StepId' })]]></SourceLine><Message><![CDATA[The type is not specified for variable "stepId"]]></Message></Violation></File><File name='script1.groovy'><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='10'><SourceLine><![CDATA[def reader = message.getHeader(key, Reader)]]></SourceLine><Message><![CDATA[The type is not specified for variable "reader"]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='28'><SourceLine><![CDATA[def reader = message.getBody(Reader)]]></SourceLine><Message><![CDATA[The type is not specified for variable "reader"]]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='34'><SourceLine><![CDATA[    ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='35'><SourceLine><![CDATA[def ex = message.getProperty("CamelExceptionCaught")]]></SourceLine><Message><![CDATA[The type is not specified for variable "ex"]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='42'><SourceLine><![CDATA[def exBody = ex.getResponseBody()]]></SourceLine><Message><![CDATA[The type is not specified for variable "exBody"]]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='47'><SourceLine><![CDATA[            }     ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='58'><SourceLine><![CDATA[    ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='60'><SourceLine><![CDATA[def additionalTrackingObjects = ["traceid", "traceparent", "requestid" ]]]></SourceLine><Message><![CDATA[The type is not specified for variable "additionalTrackingObjects"]]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='61'><SourceLine><![CDATA[    ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='62'><SourceLine><![CDATA[def messageLog = messageLogFactory.getMessageLog(message);]]></SourceLine><Message><![CDATA[The type is not specified for variable "messageLog"]]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='63'><SourceLine><![CDATA[    ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='64'><SourceLine><![CDATA[def iterationElementsLists = [message.getProperties(), message.getHeaders()]]]></SourceLine><Message><![CDATA[The type is not specified for variable "iterationElementsLists"]]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='65'><SourceLine><![CDATA[                                     ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='ConsecutiveBlankLines' priority='3' lineNumber='65'><SourceLine><![CDATA[    ]]></SourceLine><Message><![CDATA[File script1.groovy has consecutive blank lines]]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='66'><SourceLine><![CDATA[    ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='70'><SourceLine><![CDATA[if (key.toLowerCase().startsWith("ch_"))]]></SourceLine><Message><![CDATA[The statement on line 70 in class None is at the incorrect indent level: Depending on your chaining style, expected one of [21, 25, 29] or one of [55, 59, 63] columns, but was 14]]></Message></Violation><Violation ruleName='BracesForIfElse' priority='2' lineNumber='70'><SourceLine><![CDATA[if (key.toLowerCase().startsWith("ch_"))]]></SourceLine><Message><![CDATA[Opening brace should be on the same line as 'if']]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='70'><SourceLine><![CDATA[    	        if (key.toLowerCase().startsWith("ch_")) ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='72'><SourceLine><![CDATA[println("$key - $value")]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='72'><SourceLine><![CDATA[println("$key - $value")]]></SourceLine><Message><![CDATA[The statement on line 72 in class None is at the incorrect indent level: Expected one of columns [25, 29, 33] but was 15]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='73'><SourceLine><![CDATA[messageLog.addCustomHeaderProperty(key.substring(3), value);]]></SourceLine><Message><![CDATA[The statement on line 73 in class None is at the incorrect indent level: Expected one of columns [25, 29, 33] but was 16]]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='75'><SourceLine><![CDATA[    	]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='76'><SourceLine><![CDATA[if(additionalTrackingObjects.contains(key.toLowerCase().replaceAll("_","").replaceAll("-","")))]]></SourceLine><Message><![CDATA[The statement on line 76 in class None is at the incorrect indent level: Depending on your chaining style, expected one of [21, 25, 29] or one of [55, 59, 63] columns, but was 14]]></Message></Violation><Violation ruleName='BracesForIfElse' priority='2' lineNumber='76'><SourceLine><![CDATA[if(additionalTrackingObjects.contains(key.toLowerCase().replaceAll("_","").replaceAll("-","")))]]></SourceLine><Message><![CDATA[Opening brace should be on the same line as 'if']]></Message></Violation><Violation ruleName='TrailingWhitespace' priority='3' lineNumber='76'><SourceLine><![CDATA[    	        if(additionalTrackingObjects.contains(key.toLowerCase().replaceAll("_","").replaceAll("-",""))) ]]></SourceLine><Message><![CDATA[Line ends with whitespace characters]]></Message></Violation><Violation ruleName='Println' priority='2' lineNumber='78'><SourceLine><![CDATA[println("$key - $value")]]></SourceLine><Message><![CDATA[println should be replaced with something more robust]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='78'><SourceLine><![CDATA[println("$key - $value")]]></SourceLine><Message><![CDATA[The statement on line 78 in class None is at the incorrect indent level: Expected one of columns [25, 29, 33] but was 15]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='79'><SourceLine><![CDATA[messageLog.addCustomHeaderProperty(key, value);]]></SourceLine><Message><![CDATA[The statement on line 79 in class None is at the incorrect indent level: Expected one of columns [25, 29, 33] but was 16]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='85'><SourceLine><![CDATA[def messageLog = messageLogFactory.getMessageLog(message);]]></SourceLine><Message><![CDATA[The type is not specified for variable "messageLog"]]></Message></Violation><Violation ruleName='ReturnFromFinallyBlock' priority='2' lineNumber='88'><SourceLine><![CDATA[return message]]></SourceLine><Message><![CDATA[finally statements cannot return a value]]></Message></Violation></File><File name='script2.groovy'><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='6'><SourceLine><![CDATA[def fcb = new FormatConversionBean(message.exchange, message.getProperties())]]></SourceLine><Message><![CDATA[The type is not specified for variable "fcb"]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='6'><SourceLine><![CDATA[def fcb = new FormatConversionBean(message.exchange, message.getProperties())]]></SourceLine><Message><![CDATA[The statement on line 6 in class None is at the incorrect indent level: Expected column 5 but was 2]]></Message></Violation><Violation ruleName='VariableTypeRequired' priority='3' lineNumber='7'><SourceLine><![CDATA[def output = fcb.convert()]]></SourceLine><Message><![CDATA[The type is not specified for variable "output"]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='7'><SourceLine><![CDATA[def output = fcb.convert()]]></SourceLine><Message><![CDATA[The statement on line 7 in class None is at the incorrect indent level: Expected column 5 but was 2]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='8'><SourceLine><![CDATA[message.setBody(output)]]></SourceLine><Message><![CDATA[The statement on line 8 in class None is at the incorrect indent level: Expected column 5 but was 2]]></Message></Violation><Violation ruleName='Indentation' priority='3' lineNumber='9'><SourceLine><![CDATA[return message]]></SourceLine><Message><![CDATA[The statement on line 9 in class None is at the incorrect indent level: Expected column 5 but was 2]]></Message></Violation></File></Package><Rules><Rule name='BracesForIfElse'><Description><![CDATA[Checks the location of the opening brace ({) for if statements. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></Description></Rule><Rule name='BracesForMethod'><Description><![CDATA[Checks the location of the opening brace ({) for constructors and methods. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></Description></Rule><Rule name='ClassName'><Description><![CDATA[Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The regex property specifies the regular expression used to validate the class name.]]></Description></Rule><Rule name='ConsecutiveBlankLines'><Description><![CDATA[Makes sure there are no consecutive lines that are either blank or whitespace only.]]></Description></Rule><Rule name='CouldBeElvis'><Description><![CDATA[Catch an if block that could be written as an elvis expression.]]></Description></Rule><Rule name='DeadCode'><Description><![CDATA[Dead code appears after a return statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted.]]></Description></Rule><Rule name='DuplicateMapKey'><Description><![CDATA[A map literal is created with duplicated key. The map entry will be overwritten.]]></Description></Rule><Rule name='DuplicateSetValue'><Description><![CDATA[A Set literal is created with duplicate constant value. A set cannot contain two elements with the same value.]]></Description></Rule><Rule name='DuplicateStringLiteral'><Description><![CDATA[Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The ignoreStrings property () can optionally specify a comma-separated list of Strings to ignore.]]></Description></Rule><Rule name='EmptyCatchBlock'><Description><![CDATA[In most cases, exceptions should not be caught and ignored (swallowed).]]></Description></Rule><Rule name='EmptyIfStatement'><Description><![CDATA[Empty if statements are confusing and serve no purpose.]]></Description></Rule><Rule name='EmptyMethod'><Description><![CDATA[A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the @Override annotation.]]></Description></Rule><Rule name='FieldName'><Description><![CDATA[Verifies that the name of each field matches a regular expression. By default it checks that non-'final' field names start with a lowercase letter and contains only letters or numbers, and 'final' field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate field names. The finalRegex property specifies the regular expression to validate 'final' field names. The staticRegex property specifies the regular expression to validate 'static' field names. The staticFinalRegex property specifies the regular expression to validate 'static final' field names.  The ignoreFieldNames property (serialVersionUID) can specify field names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></Description></Rule><Rule name='IfStatementCouldBeTernary'><Description><![CDATA[Checks for if statements where both the if and else blocks contain only a single return statement with a constant or literal value]]></Description></Rule><Rule name='Indentation'><Description><![CDATA[Check indentation for class and method declarations, and initial statements.]]></Description></Rule><Rule name='InsecureRandom'><Description><![CDATA[Reports usages of java.util.Random, which can produce very predictable results. If two instances of Random are created with the same seed and sequence of method calls, they will generate the exact same results. Use java.security.SecureRandom instead, which provides a cryptographically strong random number generator. SecureRandom uses PRNG, which means they are using a deterministic algorithm to produce a pseudo-random number from a true random seed. SecureRandom produces non-deterministic output.]]></Description></Rule><Rule name='LineLength'><Description><![CDATA[Checks the maximum length for each line of source code. It checks for number of characters, so lines that include tabs may appear longer than the allowed number when viewing the file. The maximum line length can be configured by setting the length property, which defaults to 120.]]></Description></Rule><Rule name='LoggingSwallowsStacktrace'><Description><![CDATA[If you are logging an exception then the proper API is to call error(Object, Throwable), which will log the message and the exception stack trace. If you call error(Object) then the stacktrace may not be logged.]]></Description></Rule><Rule name='MethodName'><Description><![CDATA[Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The regex property specifies the regular expression to check the method name against.  The ignoreMethodNames property (null) can specify method names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></Description></Rule><Rule name='MethodParameterTypeRequired'><Description><![CDATA[Checks that method parameters are not dynamically typed, that is they are explicitly stated and different than def.]]></Description></Rule><Rule name='MethodReturnTypeRequired'><Description><![CDATA[Checks that method return types are not dynamic, that is they are explicitly stated and different than def.]]></Description></Rule><Rule name='ParameterName'><Description><![CDATA[Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. The regex property specifies the default regular expression used to validate the parameter name.  The ignoreParameterNames property (null) can specify parameter names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></Description></Rule><Rule name='ParameterReassignment'><Description><![CDATA[Checks for a method or closure parameter being reassigned to a new value within the body of the method/closure, which is a confusing and questionable practice. Use a temporary variable instead.]]></Description></Rule><Rule name='PrintStackTrace'><Description><![CDATA[Checks for calls to printStackTrace().]]></Description></Rule><Rule name='Println'><Description><![CDATA[Checks for calls to this.print(), this.println() or this.printf().]]></Description></Rule><Rule name='PublicMethodsBeforeNonPublicMethods'><Description><![CDATA[Enforce that all public methods are above protected and private methods.]]></Description></Rule><Rule name='ReturnFromFinallyBlock'><Description><![CDATA[Returning from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='SpaceAroundOperator'><Description><![CDATA[Check that there is at least one space (blank) or whitespace around each binary operator.]]></Description></Rule><Rule name='StaticMethodsBeforeInstanceMethods'><Description><![CDATA[Enforce that all static methods are above all instance methods within a class]]></Description></Rule><Rule name='SystemErrPrint'><Description><![CDATA[Checks for calls to System.err.print(), System.err.println() or System.err.printf().]]></Description></Rule><Rule name='SystemExit'><Description><![CDATA[Web applications should never call System.exit(). A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application.]]></Description></Rule><Rule name='SystemOutPrint'><Description><![CDATA[Checks for calls to System.out.print(), System.out.println() or System.out.printf().]]></Description></Rule><Rule name='ThrowExceptionFromFinallyBlock'><Description><![CDATA[Throwing an exception from a finally block is confusing and can hide the original exception.]]></Description></Rule><Rule name='TrailingWhitespace'><Description><![CDATA[Checks that no lines of source code end with whitespace characters.]]></Description></Rule><Rule name='UnnecessaryBooleanExpression'><Description><![CDATA[Checks for unnecessary boolean expressions, including ANDing (&amp;&amp;) or ORing (||) with true, false, null, or a Map/List/String/Number literal. Also checks for negation (!) of true, false, null, or a Map/List/String/Number literal.]]></Description></Rule><Rule name='UnnecessaryCast'><Description><![CDATA[Checks for unnecessary cast operations]]></Description></Rule><Rule name='UnnecessaryDefInVariableDeclaration'><Description><![CDATA[If a variable has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance 'def private n = 2' is redundant and can be simplified to 'private n = 2'.]]></Description></Rule><Rule name='UnnecessaryParenthesesForMethodCallWithClosure'><Description><![CDATA[If a method is called and the only parameter to that method is an inline closure then the parentheses of the method call can be omitted.]]></Description></Rule><Rule name='UnnecessarySafeNavigationOperator'><Description><![CDATA[Check for the safe navigation operator (?.) applied to constants and literals, which can never be null.]]></Description></Rule><Rule name='VariableName'><Description><![CDATA[Verifies that the name of each method matches a regular expression. By default it checks that non-'final' variable names start with a lowercase letter and contains only letters or numbers, and 'final' variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate a non-'final' variable name. The finalRegex property specifies the regular expression used to validate 'final' variable names. The ignoreVariableNames property (null) can specify variable names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></Description></Rule><Rule name='VariableTypeRequired'><Description><![CDATA[Checks that variable types are explicitly specified in declarations (and not using def)]]></Description></Rule></Rules></CodeNarc>