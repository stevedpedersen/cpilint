{
    "codeNarc": {
        "url": "https://codenarc.org",
        "version": "3.2.0"
    },
    "report": {
        "timestamp": "May 1, 2025, 3:47:52 PM"
    },
    "project": {
        "title": "iFlow Governance",
        "sourceDirectories": [
            "resources\\if-02-example\\src\\main\\"
        ]
    },
    "summary": {
        "totalFiles": 3,
        "filesWithViolations": 3,
        "priority1": 0,
        "priority2": 5,
        "priority3": 33
    },
    "packages": [
        {
            "path": "",
            "totalFiles": 3,
            "filesWithViolations": 3,
            "priority1": 0,
            "priority2": 5,
            "priority3": 33,
            "files": [
                
            ]
        },
        {
            "path": "resources",
            "totalFiles": 3,
            "filesWithViolations": 3,
            "priority1": 0,
            "priority2": 5,
            "priority3": 33,
            "files": [
                
            ]
        },
        {
            "path": "resources/script",
            "totalFiles": 3,
            "filesWithViolations": 3,
            "priority1": 0,
            "priority2": 5,
            "priority3": 33,
            "files": [
                {
                    "name": "Logger.groovy",
                    "violations": [
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 19,
                            "sourceLine": "def mplConfig = message.getProperty('SAP_MessageProcessingLogConfiguration')",
                            "message": "The type is not specified for variable \"mplConfig\""
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 45,
                            "sourceLine": "def stepId = this.mpl.get(mplKeys.find { it.getName() == 'StepId' })",
                            "message": "The type is not specified for variable \"stepId\""
                        }
                    ]
                },
                {
                    "name": "script1.groovy",
                    "violations": [
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 10,
                            "sourceLine": "def reader = message.getHeader(key, Reader)",
                            "message": "The type is not specified for variable \"reader\""
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 28,
                            "sourceLine": "def reader = message.getBody(Reader)",
                            "message": "The type is not specified for variable \"reader\""
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 34,
                            "sourceLine": "    ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 35,
                            "sourceLine": "def ex = message.getProperty(\"CamelExceptionCaught\")",
                            "message": "The type is not specified for variable \"ex\""
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 42,
                            "sourceLine": "def exBody = ex.getResponseBody()",
                            "message": "The type is not specified for variable \"exBody\""
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 47,
                            "sourceLine": "            }     ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 58,
                            "sourceLine": "    ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 60,
                            "sourceLine": "def additionalTrackingObjects = [\"traceid\", \"traceparent\", \"requestid\" ]",
                            "message": "The type is not specified for variable \"additionalTrackingObjects\""
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 61,
                            "sourceLine": "    ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 62,
                            "sourceLine": "def messageLog = messageLogFactory.getMessageLog(message);",
                            "message": "The type is not specified for variable \"messageLog\""
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 63,
                            "sourceLine": "    ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 64,
                            "sourceLine": "def iterationElementsLists = [message.getProperties(), message.getHeaders()]",
                            "message": "The type is not specified for variable \"iterationElementsLists\""
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 65,
                            "sourceLine": "                                     ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "ConsecutiveBlankLines",
                            "priority": 3,
                            "lineNumber": 65,
                            "sourceLine": "    ",
                            "message": "File script1.groovy has consecutive blank lines"
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 66,
                            "sourceLine": "    ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 70,
                            "sourceLine": "if (key.toLowerCase().startsWith(\"ch_\"))",
                            "message": "The statement on line 70 in class None is at the incorrect indent level: Depending on your chaining style, expected one of [21, 25, 29] or one of [55, 59, 63] columns, but was 14"
                        },
                        {
                            "ruleName": "BracesForIfElse",
                            "priority": 2,
                            "lineNumber": 70,
                            "sourceLine": "if (key.toLowerCase().startsWith(\"ch_\"))",
                            "message": "Opening brace should be on the same line as 'if'"
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 70,
                            "sourceLine": "    \t        if (key.toLowerCase().startsWith(\"ch_\")) ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "Println",
                            "priority": 2,
                            "lineNumber": 72,
                            "sourceLine": "println(\"$key - $value\")",
                            "message": "println should be replaced with something more robust"
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 72,
                            "sourceLine": "println(\"$key - $value\")",
                            "message": "The statement on line 72 in class None is at the incorrect indent level: Expected one of columns [25, 29, 33] but was 15"
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 73,
                            "sourceLine": "messageLog.addCustomHeaderProperty(key.substring(3), value);",
                            "message": "The statement on line 73 in class None is at the incorrect indent level: Expected one of columns [25, 29, 33] but was 16"
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 75,
                            "sourceLine": "    \t",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 76,
                            "sourceLine": "if(additionalTrackingObjects.contains(key.toLowerCase().replaceAll(\"_\",\"\").replaceAll(\"-\",\"\")))",
                            "message": "The statement on line 76 in class None is at the incorrect indent level: Depending on your chaining style, expected one of [21, 25, 29] or one of [55, 59, 63] columns, but was 14"
                        },
                        {
                            "ruleName": "BracesForIfElse",
                            "priority": 2,
                            "lineNumber": 76,
                            "sourceLine": "if(additionalTrackingObjects.contains(key.toLowerCase().replaceAll(\"_\",\"\").replaceAll(\"-\",\"\")))",
                            "message": "Opening brace should be on the same line as 'if'"
                        },
                        {
                            "ruleName": "TrailingWhitespace",
                            "priority": 3,
                            "lineNumber": 76,
                            "sourceLine": "    \t        if(additionalTrackingObjects.contains(key.toLowerCase().replaceAll(\"_\",\"\").replaceAll(\"-\",\"\"))) ",
                            "message": "Line ends with whitespace characters"
                        },
                        {
                            "ruleName": "Println",
                            "priority": 2,
                            "lineNumber": 78,
                            "sourceLine": "println(\"$key - $value\")",
                            "message": "println should be replaced with something more robust"
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 78,
                            "sourceLine": "println(\"$key - $value\")",
                            "message": "The statement on line 78 in class None is at the incorrect indent level: Expected one of columns [25, 29, 33] but was 15"
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 79,
                            "sourceLine": "messageLog.addCustomHeaderProperty(key, value);",
                            "message": "The statement on line 79 in class None is at the incorrect indent level: Expected one of columns [25, 29, 33] but was 16"
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 85,
                            "sourceLine": "def messageLog = messageLogFactory.getMessageLog(message);",
                            "message": "The type is not specified for variable \"messageLog\""
                        },
                        {
                            "ruleName": "ReturnFromFinallyBlock",
                            "priority": 2,
                            "lineNumber": 88,
                            "sourceLine": "return message",
                            "message": "finally statements cannot return a value"
                        }
                    ]
                },
                {
                    "name": "script2.groovy",
                    "violations": [
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 6,
                            "sourceLine": "def fcb = new FormatConversionBean(message.exchange, message.getProperties())",
                            "message": "The type is not specified for variable \"fcb\""
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 6,
                            "sourceLine": "def fcb = new FormatConversionBean(message.exchange, message.getProperties())",
                            "message": "The statement on line 6 in class None is at the incorrect indent level: Expected column 5 but was 2"
                        },
                        {
                            "ruleName": "VariableTypeRequired",
                            "priority": 3,
                            "lineNumber": 7,
                            "sourceLine": "def output = fcb.convert()",
                            "message": "The type is not specified for variable \"output\""
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 7,
                            "sourceLine": "def output = fcb.convert()",
                            "message": "The statement on line 7 in class None is at the incorrect indent level: Expected column 5 but was 2"
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 8,
                            "sourceLine": "message.setBody(output)",
                            "message": "The statement on line 8 in class None is at the incorrect indent level: Expected column 5 but was 2"
                        },
                        {
                            "ruleName": "Indentation",
                            "priority": 3,
                            "lineNumber": 9,
                            "sourceLine": "return message",
                            "message": "The statement on line 9 in class None is at the incorrect indent level: Expected column 5 but was 2"
                        }
                    ]
                }
            ]
        }
    ],
    "rules": [
        {
            "name": "BracesForIfElse",
            "description": "Checks the location of the opening brace ({) for if statements. By default, requires them on the same line, but the sameLine property can be set to false to override this."
        },
        {
            "name": "BracesForMethod",
            "description": "Checks the location of the opening brace ({) for constructors and methods. By default, requires them on the same line, but the sameLine property can be set to false to override this."
        },
        {
            "name": "ClassName",
            "description": "Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The regex property specifies the regular expression used to validate the class name."
        },
        {
            "name": "ConsecutiveBlankLines",
            "description": "Makes sure there are no consecutive lines that are either blank or whitespace only."
        },
        {
            "name": "CouldBeElvis",
            "description": "Catch an if block that could be written as an elvis expression."
        },
        {
            "name": "DeadCode",
            "description": "Dead code appears after a return statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted."
        },
        {
            "name": "DuplicateMapKey",
            "description": "A map literal is created with duplicated key. The map entry will be overwritten."
        },
        {
            "name": "DuplicateSetValue",
            "description": "A Set literal is created with duplicate constant value. A set cannot contain two elements with the same value."
        },
        {
            "name": "DuplicateStringLiteral",
            "description": "Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The ignoreStrings property () can optionally specify a comma-separated list of Strings to ignore."
        },
        {
            "name": "EmptyCatchBlock",
            "description": "In most cases, exceptions should not be caught and ignored (swallowed)."
        },
        {
            "name": "EmptyIfStatement",
            "description": "Empty if statements are confusing and serve no purpose."
        },
        {
            "name": "EmptyMethod",
            "description": "A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the @Override annotation."
        },
        {
            "name": "FieldName",
            "description": "Verifies that the name of each field matches a regular expression. By default it checks that non-'final' field names start with a lowercase letter and contains only letters or numbers, and 'final' field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate field names. The finalRegex property specifies the regular expression to validate 'final' field names. The staticRegex property specifies the regular expression to validate 'static' field names. The staticFinalRegex property specifies the regular expression to validate 'static final' field names.  The ignoreFieldNames property (serialVersionUID) can specify field names that should be ignored, optionally containing wildcard characters ('*' or '?')."
        },
        {
            "name": "IfStatementCouldBeTernary",
            "description": "Checks for if statements where both the if and else blocks contain only a single return statement with a constant or literal value"
        },
        {
            "name": "Indentation",
            "description": "Check indentation for class and method declarations, and initial statements."
        },
        {
            "name": "InsecureRandom",
            "description": "Reports usages of java.util.Random, which can produce very predictable results. If two instances of Random are created with the same seed and sequence of method calls, they will generate the exact same results. Use java.security.SecureRandom instead, which provides a cryptographically strong random number generator. SecureRandom uses PRNG, which means they are using a deterministic algorithm to produce a pseudo-random number from a true random seed. SecureRandom produces non-deterministic output."
        },
        {
            "name": "LineLength",
            "description": "Checks the maximum length for each line of source code. It checks for number of characters, so lines that include tabs may appear longer than the allowed number when viewing the file. The maximum line length can be configured by setting the length property, which defaults to 120."
        },
        {
            "name": "LoggingSwallowsStacktrace",
            "description": "If you are logging an exception then the proper API is to call error(Object, Throwable), which will log the message and the exception stack trace. If you call error(Object) then the stacktrace may not be logged."
        },
        {
            "name": "MethodName",
            "description": "Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The regex property specifies the regular expression to check the method name against.  The ignoreMethodNames property (null) can specify method names that should be ignored, optionally containing wildcard characters ('*' or '?')."
        },
        {
            "name": "MethodParameterTypeRequired",
            "description": "Checks that method parameters are not dynamically typed, that is they are explicitly stated and different than def."
        },
        {
            "name": "MethodReturnTypeRequired",
            "description": "Checks that method return types are not dynamic, that is they are explicitly stated and different than def."
        },
        {
            "name": "ParameterName",
            "description": "Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. The regex property specifies the default regular expression used to validate the parameter name.  The ignoreParameterNames property (null) can specify parameter names that should be ignored, optionally containing wildcard characters ('*' or '?')."
        },
        {
            "name": "ParameterReassignment",
            "description": "Checks for a method or closure parameter being reassigned to a new value within the body of the method/closure, which is a confusing and questionable practice. Use a temporary variable instead."
        },
        {
            "name": "PrintStackTrace",
            "description": "Checks for calls to printStackTrace()."
        },
        {
            "name": "Println",
            "description": "Checks for calls to this.print(), this.println() or this.printf()."
        },
        {
            "name": "PublicMethodsBeforeNonPublicMethods",
            "description": "Enforce that all public methods are above protected and private methods."
        },
        {
            "name": "ReturnFromFinallyBlock",
            "description": "Returning from a finally block is confusing and can hide the original exception."
        },
        {
            "name": "SpaceAroundOperator",
            "description": "Check that there is at least one space (blank) or whitespace around each binary operator."
        },
        {
            "name": "StaticMethodsBeforeInstanceMethods",
            "description": "Enforce that all static methods are above all instance methods within a class"
        },
        {
            "name": "SystemErrPrint",
            "description": "Checks for calls to System.err.print(), System.err.println() or System.err.printf()."
        },
        {
            "name": "SystemExit",
            "description": "Web applications should never call System.exit(). A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application."
        },
        {
            "name": "SystemOutPrint",
            "description": "Checks for calls to System.out.print(), System.out.println() or System.out.printf()."
        },
        {
            "name": "ThrowExceptionFromFinallyBlock",
            "description": "Throwing an exception from a finally block is confusing and can hide the original exception."
        },
        {
            "name": "TrailingWhitespace",
            "description": "Checks that no lines of source code end with whitespace characters."
        },
        {
            "name": "UnnecessaryBooleanExpression",
            "description": "Checks for unnecessary boolean expressions, including ANDing (&&) or ORing (||) with true, false, null, or a Map/List/String/Number literal. Also checks for negation (!) of true, false, null, or a Map/List/String/Number literal."
        },
        {
            "name": "UnnecessaryCast",
            "description": "Checks for unnecessary cast operations"
        },
        {
            "name": "UnnecessaryDefInVariableDeclaration",
            "description": "If a variable has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance 'def private n = 2' is redundant and can be simplified to 'private n = 2'."
        },
        {
            "name": "UnnecessaryParenthesesForMethodCallWithClosure",
            "description": "If a method is called and the only parameter to that method is an inline closure then the parentheses of the method call can be omitted."
        },
        {
            "name": "UnnecessarySafeNavigationOperator",
            "description": "Check for the safe navigation operator (?.) applied to constants and literals, which can never be null."
        },
        {
            "name": "VariableName",
            "description": "Verifies that the name of each method matches a regular expression. By default it checks that non-'final' variable names start with a lowercase letter and contains only letters or numbers, and 'final' variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate a non-'final' variable name. The finalRegex property specifies the regular expression used to validate 'final' variable names. The ignoreVariableNames property (null) can specify variable names that should be ignored, optionally containing wildcard characters ('*' or '?')."
        },
        {
            "name": "VariableTypeRequired",
            "description": "Checks that variable types are explicitly specified in declarations (and not using def)"
        }
    ]
}